# =============================================================================
# SOS App - MongoDB StatefulSet Configuration
# =============================================================================
# Purpose: Document database for unstructured data (logs, messages, events)
# Features: 3-replica set, authentication, sharding-ready
# Replicas: 3 (replica set with automatic failover)
# Storage: 100Gi per replica (300Gi total)
# =============================================================================

---
# -----------------------------------------------------------------------------
# Service: MongoDB Headless Service (for StatefulSet)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: sos-app
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Headless service for MongoDB StatefulSet - provides stable network IDs"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service
  publishNotReadyAddresses: true
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database

---
# -----------------------------------------------------------------------------
# Service: MongoDB Client Service (for application connections)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "MongoDB service for application connections"
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
  - name: metrics
    port: 9216
    targetPort: 9216
    protocol: TCP
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database

---
# -----------------------------------------------------------------------------
# ConfigMap: MongoDB Configuration
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: sos-app
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
data:
  # MongoDB Configuration File
  mongod.conf: |
    # Network settings
    net:
      port: 27017
      bindIp: 0.0.0.0

    # Storage settings
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
          journalCompressor: snappy
          directoryForIndexes: true
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true

    # Replication settings
    replication:
      replSetName: sos-app-rs
      oplogSizeMB: 2048

    # Security settings
    security:
      authorization: enabled
      keyFile: /etc/mongodb/keyfile/mongodb-keyfile

    # Process management
    processManagement:
      timeZoneInfo: /usr/share/zoneinfo

    # System log
    systemLog:
      destination: file
      path: /var/log/mongodb/mongod.log
      logAppend: true
      logRotate: reopen
      verbosity: 1
      component:
        accessControl:
          verbosity: 1
        command:
          verbosity: 1

    # Operation profiling
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100

---
# -----------------------------------------------------------------------------
# StatefulSet: MongoDB
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "7.0"
  annotations:
    description: "MongoDB replica set for logs, messages, and events"
spec:
  serviceName: mongodb-headless
  replicas: 3  # 3-member replica set

  # Pod Management Policy
  podManagementPolicy: OrderedReady

  # Update Strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

  # Selector
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: database

  # Pod Template
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "7.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
        prometheus.io/path: "/metrics"

    spec:
      # Priority Class
      priorityClassName: sos-app-high

      # Service Account
      serviceAccountName: default

      # Security Context (Pod-level)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # mongodb user
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault

      # Anti-Affinity (spread pods across nodes)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mongodb
                  app.kubernetes.io/component: database
              topologyKey: kubernetes.io/hostname
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mongodb
                  app.kubernetes.io/component: database
              topologyKey: topology.kubernetes.io/zone

      # Init Containers
      initContainers:
      # Fix permissions on data directory and keyfile
      - name: fix-permissions
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /data/db
          chmod 700 /data/db
          chown -R 999:999 /var/log/mongodb
          chmod 700 /var/log/mongodb
          if [ -f /etc/mongodb/keyfile/mongodb-keyfile ]; then
            chown 999:999 /etc/mongodb/keyfile/mongodb-keyfile
            chmod 400 /etc/mongodb/keyfile/mongodb-keyfile
          fi
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-log
          mountPath: /var/log/mongodb
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
        securityContext:
          runAsUser: 0  # Need root to chown
          runAsNonRoot: false

      # Containers
      containers:
      # MongoDB Container
      - name: mongodb
        image: mongo:7.0
        imagePullPolicy: IfNotPresent

        # Command
        command:
        - mongod
        - --config=/etc/mongodb/mongod.conf

        # Environment Variables
        env:
        # MongoDB Root Credentials
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-password

        # Pod Information
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        # Ports
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi

        # Liveness Probe
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # Startup Probe (for slow startup)
        startupProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30  # 150 seconds total

        # Volume Mounts
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-log
          mountPath: /var/log/mongodb
        - name: mongodb-config
          mountPath: /etc/mongodb/mongod.conf
          subPath: mongod.conf
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          readOnly: true
        - name: mongodb-init-scripts
          mountPath: /docker-entrypoint-initdb.d

        # Security Context (Container-level)
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # MongoDB needs write access
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL

      # MongoDB Exporter (for Prometheus metrics)
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.40
        imagePullPolicy: IfNotPresent

        # Environment Variables
        env:
        - name: MONGODB_URI
          value: "mongodb://admin:$(MONGODB_ROOT_PASSWORD)@localhost:27017/admin?authSource=admin"
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: mongodb-root-password

        # Ports
        ports:
        - name: metrics
          containerPort: 9216
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi

        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /
            port: 9216
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /
            port: 9216
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-credentials
          items:
          - key: mongodb-replica-set-key
            path: mongodb-keyfile
          defaultMode: 0400
      - name: mongodb-init-scripts
        configMap:
          name: mongodb-init-scripts
          optional: true
      - name: mongodb-log
        emptyDir: {}

  # Volume Claim Templates
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/component: database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
      # storageClassName: fast-ssd  # Uncomment and adjust for your cluster

---
# -----------------------------------------------------------------------------
# PodDisruptionBudget: Ensure at least 2 replicas available during disruptions
# -----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongodb-pdb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: database
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: database

# =============================================================================
# Usage Instructions
# =============================================================================
#
# 1. Create MongoDB Secrets:
#    # Generate replica set key
#    openssl rand -base64 756 > mongodb-keyfile
#
#    kubectl create secret generic mongodb-credentials \
#      --from-literal=mongodb-root-username=admin \
#      --from-literal=mongodb-root-password=$(openssl rand -base64 32) \
#      --from-literal=mongodb-username=sos_app \
#      --from-literal=mongodb-password=$(openssl rand -base64 32) \
#      --from-file=mongodb-replica-set-key=mongodb-keyfile \
#      -n sos-app
#
#    rm mongodb-keyfile  # Delete local file for security
#
# 2. Create MongoDB initialization scripts ConfigMap (optional):
#    kubectl create configmap mongodb-init-scripts \
#      --from-file=init.js=mongodb-init.js \
#      -n sos-app
#
# 3. Apply this configuration:
#    kubectl apply -f mongodb-statefulset.yaml
#
# 4. Wait for all replicas to be ready:
#    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mongodb -n sos-app --timeout=300s
#
# 5. Initialize replica set (run on mongodb-0):
#    kubectl exec -it mongodb-0 -n sos-app -c mongodb -- mongosh --eval '
#      rs.initiate({
#        _id: "sos-app-rs",
#        members: [
#          { _id: 0, host: "mongodb-0.mongodb-headless.sos-app.svc.cluster.local:27017" },
#          { _id: 1, host: "mongodb-1.mongodb-headless.sos-app.svc.cluster.local:27017" },
#          { _id: 2, host: "mongodb-2.mongodb-headless.sos-app.svc.cluster.local:27017" }
#        ]
#      })
#    '
#
# 6. Verify replica set status:
#    kubectl exec -it mongodb-0 -n sos-app -c mongodb -- mongosh --eval 'rs.status()'
#
# 7. Create application user (after replica set is initialized):
#    kubectl exec -it mongodb-0 -n sos-app -c mongodb -- mongosh -u admin -p <password> --eval '
#      use admin
#      db.createUser({
#        user: "sos_app",
#        pwd: "CHANGE_ME",
#        roles: [
#          { role: "readWrite", db: "emergency_logs" },
#          { role: "readWrite", db: "emergency_messages" },
#          { role: "readWrite", db: "device_telemetry" },
#          { role: "readWrite", db: "audit_logs" }
#        ]
#      })
#    '
#
# 8. Connect to MongoDB:
#    # Connection string:
#    mongodb://sos_app:PASSWORD@mongodb-service.sos-app.svc.cluster.local:27017/emergency_logs?replicaSet=sos-app-rs&authSource=admin
#
# =============================================================================
# Monitoring
# =============================================================================
#
# Prometheus metrics available at:
#   http://mongodb-service:9216/metrics
#
# Key metrics:
# - mongodb_up - MongoDB uptime
# - mongodb_connections - Active connections
# - mongodb_op_counters_total - Operations per second
# - mongodb_mongod_replset_member_state - Replica set member state
#
# =============================================================================
# Backup and Recovery
# =============================================================================
#
# Backup using mongodump:
#   kubectl exec -it mongodb-0 -n sos-app -c mongodb -- \
#     mongodump --uri="mongodb://admin:PASSWORD@localhost:27017" --archive=/backup/backup.archive
#
# Restore using mongorestore:
#   kubectl exec -it mongodb-0 -n sos-app -c mongodb -- \
#     mongorestore --uri="mongodb://admin:PASSWORD@localhost:27017" --archive=/backup/backup.archive
#
# =============================================================================
# Scaling
# =============================================================================
#
# Add more replica set members:
#   kubectl scale statefulset mongodb --replicas=5 -n sos-app
#
# Then add new members to replica set:
#   rs.add("mongodb-3.mongodb-headless.sos-app.svc.cluster.local:27017")
#   rs.add("mongodb-4.mongodb-headless.sos-app.svc.cluster.local:27017")
#
# =============================================================================
# Troubleshooting
# =============================================================================
#
# Check replica set status:
#   kubectl exec -it mongodb-0 -n sos-app -c mongodb -- mongosh -u admin -p PASSWORD --eval 'rs.status()'
#
# Check logs:
#   kubectl logs mongodb-0 -n sos-app -c mongodb
#
# Check configuration:
#   kubectl exec -it mongodb-0 -n sos-app -c mongodb -- cat /etc/mongodb/mongod.conf
#
# =============================================================================
