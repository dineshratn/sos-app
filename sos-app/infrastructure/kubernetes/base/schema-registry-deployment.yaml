# =============================================================================
# SOS App - Confluent Schema Registry Deployment
# =============================================================================
# Purpose: Centralized schema management for Kafka topics using Avro
# Features: Schema validation, evolution, compatibility checking
# Replicas: 2 (for high availability)
# Dependencies: Kafka cluster must be running
# =============================================================================

---
# -----------------------------------------------------------------------------
# ConfigMap: Schema Registry Configuration
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-registry-config
  namespace: sos-app
  labels:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Configuration for Confluent Schema Registry"
data:
  # Schema Registry configuration
  schema-registry.properties: |
    # Kafka connection
    kafkastore.bootstrap.servers=kafka-service.sos-app.svc.cluster.local:9092
    kafkastore.topic=_schemas
    kafkastore.topic.replication.factor=3

    # Schema Registry settings
    schema.registry.group.id=schema-registry

    # Compatibility settings
    # Options: BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE, NONE
    schema.compatibility.level=BACKWARD

    # API settings
    host.name=schema-registry
    listeners=http://0.0.0.0:8081

    # Security (basic setup, enhance for production)
    schema.registry.inter.instance.protocol=http

    # Performance tuning
    kafkastore.init.timeout.ms=60000
    kafkastore.timeout.ms=10000

    # Debug settings
    debug=false

---
# -----------------------------------------------------------------------------
# Service: Schema Registry Service
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: schema-registry-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Service endpoint for Schema Registry API"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging

---
# -----------------------------------------------------------------------------
# Deployment: Schema Registry
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: schema-registry
  namespace: sos-app
  labels:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "7.5.0"
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Confluent Schema Registry for Avro schema management"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: schema-registry
      app.kubernetes.io/component: messaging
  template:
    metadata:
      labels:
        app.kubernetes.io/name: schema-registry
        app.kubernetes.io/component: messaging
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "7.5.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
    spec:
      # -----------------------------------------------------------------------------
      # Security Context
      # -----------------------------------------------------------------------------
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # -----------------------------------------------------------------------------
      # Init Containers - Wait for Kafka
      # -----------------------------------------------------------------------------
      initContainers:
      - name: wait-for-kafka
        image: confluentinc/cp-kafka:7.5.0
        command:
        - sh
        - -c
        - |
          echo "Waiting for Kafka to be ready..."
          until kafka-broker-api-versions --bootstrap-server kafka-service.sos-app.svc.cluster.local:9092 &>/dev/null; do
            echo "Kafka not ready yet, waiting..."
            sleep 5
          done
          echo "Kafka is ready!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

      # -----------------------------------------------------------------------------
      # Main Container - Schema Registry
      # -----------------------------------------------------------------------------
      containers:
      - name: schema-registry
        image: confluentinc/cp-schema-registry:7.5.0
        imagePullPolicy: IfNotPresent

        # Environment variables
        env:
        - name: SCHEMA_REGISTRY_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

        - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
          value: "kafka-service.sos-app.svc.cluster.local:9092"

        - name: SCHEMA_REGISTRY_KAFKASTORE_TOPIC
          value: "_schemas"

        - name: SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR
          value: "3"

        - name: SCHEMA_REGISTRY_LISTENERS
          value: "http://0.0.0.0:8081"

        - name: SCHEMA_REGISTRY_SCHEMA_COMPATIBILITY_LEVEL
          value: "BACKWARD"

        - name: SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS
          value: "10000"

        - name: SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS
          value: "60000"

        - name: SCHEMA_REGISTRY_DEBUG
          value: "false"

        # JVM options for performance
        - name: SCHEMA_REGISTRY_HEAP_OPTS
          value: "-Xms512M -Xmx1G"

        - name: SCHEMA_REGISTRY_JMX_OPTS
          value: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"

        # Ports
        ports:
        - name: http
          containerPort: 8081
          protocol: TCP

        # Health checks
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /subjects
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12

        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

      # -----------------------------------------------------------------------------
      # Pod Settings
      # -----------------------------------------------------------------------------
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst

      # Affinity rules - spread across nodes for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - schema-registry
              topologyKey: kubernetes.io/hostname

---
# -----------------------------------------------------------------------------
# HorizontalPodAutoscaler: Auto-scaling for Schema Registry
# -----------------------------------------------------------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: schema-registry-hpa
  namespace: sos-app
  labels:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: sos-app
  annotations:
    description: "Auto-scaling for Schema Registry based on CPU and memory"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: schema-registry
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# -----------------------------------------------------------------------------
# PodDisruptionBudget: Ensure availability during disruptions
# -----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: schema-registry-pdb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/component: messaging
    app.kubernetes.io/part-of: sos-app
  annotations:
    description: "Ensure at least 1 Schema Registry pod is available during disruptions"
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: schema-registry
      app.kubernetes.io/component: messaging
