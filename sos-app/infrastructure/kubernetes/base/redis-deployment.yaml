# =============================================================================
# SOS App - Redis Deployment Configuration
# =============================================================================
# Purpose: In-memory cache for auth tokens, sessions, and frequently accessed data
# Features: RDB + AOF persistence, password authentication, LRU eviction
# Deployment: 2 replicas (master-replica) for high availability
# Storage: 10Gi for persistence
# =============================================================================

---
# -----------------------------------------------------------------------------
# Service: Redis Master Service (for write operations)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Redis master service for read/write operations"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: 9121
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    redis-role: master  # Routes to master pod

---
# -----------------------------------------------------------------------------
# Service: Redis Replica Service (for read operations)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: redis-replica-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Redis replica service for read operations"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    redis-role: replica  # Routes to replica pods

---
# -----------------------------------------------------------------------------
# ConfigMap: Redis Configuration
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
data:
  # Redis Master Configuration
  redis-master.conf: |
    # Network
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300

    # General
    daemonize no
    supervised no
    pidfile /var/run/redis.pid
    loglevel notice
    logfile ""

    # Memory Management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5

    # Persistence - RDB
    save 900 1           # Save after 900 sec if 1 key changed
    save 300 10          # Save after 300 sec if 10 keys changed
    save 60 10000        # Save after 60 sec if 10000 keys changed
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data

    # Persistence - AOF (Append-Only File)
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes

    # Replication
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-disable-tcp-nodelay no
    replica-priority 100

    # Security (password will be set via environment variable)
    # requirepass will be set at runtime

    # Limits
    maxclients 10000

    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128

    # Latency Monitor
    latency-monitor-threshold 100

    # Event Notification
    notify-keyspace-events ""

    # Advanced
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    dynamic-hz yes
    aof-rewrite-incremental-fsync yes
    rdb-save-incremental-fsync yes

  # Redis Replica Configuration
  redis-replica.conf: |
    # Include master configuration
    include /etc/redis/redis-master.conf

    # Replica-specific settings
    replica-read-only yes
    replicaof redis-service 6379

---
# -----------------------------------------------------------------------------
# Deployment: Redis Master
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "7.2"
    redis-role: master
  annotations:
    description: "Redis master deployment for caching and sessions"
spec:
  replicas: 1  # Single master
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
      redis-role: master

  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "7.2"
        redis-role: master
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

    spec:
      # Priority Class
      priorityClassName: sos-app-high

      # Service Account
      serviceAccountName: default

      # Security Context (Pod-level)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # redis user
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault

      # Init Containers
      initContainers:
      # Fix permissions on data directory
      - name: fix-permissions
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /data
          chmod 755 /data
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsUser: 0  # Need root to chown
          runAsNonRoot: false

      # Containers
      containers:
      # Redis Container
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent

        # Command
        command:
        - sh
        - -c
        - |
          # Set password from secret
          export REDIS_PASSWORD=$(cat /etc/redis-secret/redis-password)
          echo "requirepass $REDIS_PASSWORD" >> /tmp/redis.conf
          echo "masterauth $REDIS_PASSWORD" >> /tmp/redis.conf
          cat /etc/redis/redis-master.conf >> /tmp/redis.conf
          redis-server /tmp/redis.conf

        # Ports
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi

        # Liveness Probe
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -a $(cat /etc/redis-secret/redis-password) ping | grep PONG
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -a $(cat /etc/redis-secret/redis-password) ping | grep PONG
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # Startup Probe
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -a $(cat /etc/redis-secret/redis-password) ping | grep PONG
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10  # 50 seconds total

        # Volume Mounts
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-secret
          mountPath: /etc/redis-secret
          readOnly: true

        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Redis needs write access to /data
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL

      # Redis Exporter (for Prometheus metrics)
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0-alpine
        imagePullPolicy: IfNotPresent

        # Environment Variables
        env:
        - name: REDIS_ADDR
          value: "localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-password

        # Ports
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi

        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /
            port: 9121
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-secret
        secret:
          secretName: redis-credentials
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-master-data

---
# -----------------------------------------------------------------------------
# Deployment: Redis Replica
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-replica
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "7.2"
    redis-role: replica
  annotations:
    description: "Redis replica deployment for read scaling"
spec:
  replicas: 1  # Can scale to N replicas for read scaling
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
      redis-role: replica

  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "7.2"
        redis-role: replica
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"

    spec:
      # Priority Class
      priorityClassName: sos-app-medium

      # Service Account
      serviceAccountName: default

      # Security Context (Pod-level)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # redis user
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault

      # Containers
      containers:
      # Redis Container
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent

        # Command
        command:
        - sh
        - -c
        - |
          # Set password from secret
          export REDIS_PASSWORD=$(cat /etc/redis-secret/redis-password)
          echo "requirepass $REDIS_PASSWORD" >> /tmp/redis.conf
          echo "masterauth $REDIS_PASSWORD" >> /tmp/redis.conf
          cat /etc/redis/redis-replica.conf >> /tmp/redis.conf
          redis-server /tmp/redis.conf

        # Ports
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi

        # Liveness Probe
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -a $(cat /etc/redis-secret/redis-password) ping | grep PONG
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli -a $(cat /etc/redis-secret/redis-password) ping | grep PONG
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # Volume Mounts
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-secret
          mountPath: /etc/redis-secret
          readOnly: true

        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL

      # Redis Exporter
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0-alpine
        imagePullPolicy: IfNotPresent

        env:
        - name: REDIS_ADDR
          value: "localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-password

        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP

        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi

        livenessProbe:
          httpGet:
            path: /
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 10

        readinessProbe:
          httpGet:
            path: /
            port: 9121
          initialDelaySeconds: 10
          periodSeconds: 5

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-secret
        secret:
          secretName: redis-credentials

---
# -----------------------------------------------------------------------------
# PersistentVolumeClaim: Redis Master Data
# -----------------------------------------------------------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-master-data
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  # storageClassName: fast-ssd  # Uncomment and adjust for your cluster

---
# -----------------------------------------------------------------------------
# PodDisruptionBudget: Ensure at least 1 Redis instance available
# -----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache

# =============================================================================
# Usage Instructions
# =============================================================================
#
# 1. Create Redis Secrets:
#    kubectl create secret generic redis-credentials \
#      --from-literal=redis-password=$(openssl rand -base64 32) \
#      -n sos-app
#
# 2. Apply this configuration:
#    kubectl apply -f redis-deployment.yaml
#
# 3. Wait for pods to be ready:
#    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=redis -n sos-app --timeout=120s
#
# 4. Verify Redis is working:
#    kubectl exec -it deployment/redis-master -n sos-app -c redis -- \
#      redis-cli -a $(kubectl get secret redis-credentials -n sos-app -o jsonpath='{.data.redis-password}' | base64 -d) ping
#
# 5. Connect to Redis:
#    # Write operations (master):
#    redis://:<PASSWORD>@redis-service:6379
#
#    # Read operations (replicas):
#    redis://:<PASSWORD>@redis-replica-service:6379
#
# =============================================================================
# Use Cases
# =============================================================================
#
# 1. JWT Token Blacklist (logout, revocation)
#    SET blacklist:<token> 1 EX 86400  # 24 hours
#
# 2. Session Storage
#    SETEX session:<session_id> 3600 '{"user_id":"...","created_at":"..."}'
#
# 3. User Profile Cache
#    SETEX user:<user_id> 1800 '{"name":"...","email":"..."}'  # 30 min TTL
#
# 4. Emergency Contact Cache
#    SETEX contacts:<user_id> 3600 '[{"id":"...","name":"..."}]'  # 1 hour TTL
#
# 5. Rate Limiting
#    INCR ratelimit:<user_id>:<minute>
#    EXPIRE ratelimit:<user_id>:<minute> 60
#
# 6. API Response Cache
#    SETEX api:response:<key> 300 '{"data":"..."}'  # 5 min TTL
#
# =============================================================================
# Monitoring
# =============================================================================
#
# Prometheus metrics available at:
#   http://redis-service:9121/metrics
#
# Key metrics:
# - redis_up - Redis uptime
# - redis_connected_clients - Active connections
# - redis_used_memory_bytes - Memory usage
# - redis_db_keys - Number of keys
# - redis_evicted_keys_total - Evicted keys (should be low)
#
# =============================================================================
# Scaling
# =============================================================================
#
# Scale replicas for read operations:
#   kubectl scale deployment redis-replica --replicas=3 -n sos-app
#
# Note: Redis does not support horizontal scaling of writes.
# For write scaling, consider Redis Cluster (separate configuration).
#
# =============================================================================
