# =============================================================================
# SOS App - TimescaleDB StatefulSet Configuration
# =============================================================================
# Purpose: Time-series database optimized for location tracking data
# Features: Hypertables, retention policies, compression, continuous aggregates
# Replicas: 3 (1 primary + 2 replicas for high availability)
# Storage: 50Gi per replica (150Gi total)
# =============================================================================

---
# -----------------------------------------------------------------------------
# Service: TimescaleDB Headless Service (for StatefulSet)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: timescale-headless
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Headless service for TimescaleDB StatefulSet - provides stable network IDs"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service
  publishNotReadyAddresses: true
  ports:
  - name: timescale
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database

---
# -----------------------------------------------------------------------------
# Service: TimescaleDB Primary Service (for read/write operations)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: timescale-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Primary TimescaleDB service for location data read/write"
spec:
  type: ClusterIP
  ports:
  - name: timescale
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  selector:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    statefulset.kubernetes.io/pod-name: timescale-0  # Primary replica

---
# -----------------------------------------------------------------------------
# Service: TimescaleDB Read-Only Service (for replica queries)
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: timescale-readonly-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    description: "Read-only TimescaleDB service for location data queries"
spec:
  type: ClusterIP
  ports:
  - name: timescale
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    # No specific pod name - load balances across all replicas

---
# -----------------------------------------------------------------------------
# ConfigMap: TimescaleDB Configuration
# -----------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: timescale-config
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
data:
  # PostgreSQL Configuration (TimescaleDB extends PostgreSQL)
  postgresql.conf: |
    # Connection Settings
    listen_addresses = '*'
    max_connections = 200
    superuser_reserved_connections = 3

    # Replication Settings
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    hot_standby_feedback = on

    # TimescaleDB Settings
    shared_preload_libraries = 'timescaledb'
    timescaledb.max_background_workers = 8

    # Memory Settings (for 2Gi memory pod)
    shared_buffers = 512MB
    effective_cache_size = 1536MB
    maintenance_work_mem = 128MB
    work_mem = 16MB

    # WAL Settings
    wal_buffers = 16MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Checkpoint Settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 15min

    # Query Tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = '/var/log/postgresql'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_timezone = 'UTC'

    # Locale
    datestyle = 'iso, mdy'
    timezone = 'UTC'
    lc_messages = 'en_US.UTF-8'
    lc_monetary = 'en_US.UTF-8'
    lc_numeric = 'en_US.UTF-8'
    lc_time = 'en_US.UTF-8'
    default_text_search_config = 'pg_catalog.english'

  # Replication Configuration
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # Local connections
    local   all             all                                     trust

    # IPv4 local connections
    host    all             all             127.0.0.1/32            md5

    # IPv6 local connections
    host    all             all             ::1/128                 md5

    # Kubernetes pod network (adjust to your cluster's pod CIDR)
    host    all             all             10.0.0.0/8              md5
    host    all             all             172.16.0.0/12           md5
    host    all             all             192.168.0.0/16          md5

    # Replication connections
    host    replication     postgres        10.0.0.0/8              md5
    host    replication     postgres        172.16.0.0/12           md5
    host    replication     postgres        192.168.0.0/16          md5

---
# -----------------------------------------------------------------------------
# StatefulSet: TimescaleDB
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: timescale
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "2.13-pg15"
  annotations:
    description: "TimescaleDB time-series database for location tracking"
spec:
  serviceName: timescale-headless
  replicas: 3  # 1 primary + 2 replicas

  # Pod Management Policy
  podManagementPolicy: OrderedReady

  # Update Strategy
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

  # Selector
  selector:
    matchLabels:
      app.kubernetes.io/name: timescale
      app.kubernetes.io/component: database

  # Pod Template
  template:
    metadata:
      labels:
        app.kubernetes.io/name: timescale
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "2.13-pg15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"

    spec:
      # Priority Class
      priorityClassName: sos-app-high

      # Service Account
      serviceAccountName: default

      # Security Context (Pod-level)
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault

      # Anti-Affinity (spread pods across nodes)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: timescale
                  app.kubernetes.io/component: database
              topologyKey: kubernetes.io/hostname
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: timescale
                  app.kubernetes.io/component: database
              topologyKey: topology.kubernetes.io/zone

      # Init Containers
      initContainers:
      # Fix permissions on data directory
      - name: fix-permissions
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        volumeMounts:
        - name: timescale-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0  # Need root to chown
          runAsNonRoot: false

      # Containers
      containers:
      # TimescaleDB Container
      - name: timescale
        image: timescale/timescaledb:2.13.0-pg15
        imagePullPolicy: IfNotPresent

        # Environment Variables
        env:
        # Postgres Superuser Credentials
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescale-credentials
              key: timescale-password

        # TimescaleDB Database
        - name: POSTGRES_DB
          value: "sos_app_location"

        # Pod Information
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        # Data Directory
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"

        # Ports
        ports:
        - name: timescale
          containerPort: 5432
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1
            memory: 2Gi

        # Liveness Probe
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -h localhost -p 5432
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -h localhost -p 5432 && psql -U postgres -d sos_app_location -tAc "SELECT 1"
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # Startup Probe (for slow startup)
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -h localhost -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30  # 150 seconds total

        # Volume Mounts
        volumeMounts:
        - name: timescale-data
          mountPath: /var/lib/postgresql/data
        - name: timescale-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: timescale-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: timescale-init-scripts
          mountPath: /docker-entrypoint-initdb.d

        # Security Context (Container-level)
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL

      # PostgreSQL Exporter (for Prometheus metrics)
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.14.0
        imagePullPolicy: IfNotPresent

        # Environment Variables
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@localhost:5432/sos_app_location?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timescale-credentials
              key: timescale-password
        - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
          value: "true"
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"

        # Ports
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP

        # Resources
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi

        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /
            port: 9187
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: timescale-config
        configMap:
          name: timescale-config
      - name: timescale-init-scripts
        configMap:
          name: timescale-init-scripts

  # Volume Claim Templates
  volumeClaimTemplates:
  - metadata:
      name: timescale-data
      labels:
        app.kubernetes.io/name: timescale
        app.kubernetes.io/component: database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      # storageClassName: fast-ssd  # Uncomment and adjust for your cluster

---
# -----------------------------------------------------------------------------
# PodDisruptionBudget: Ensure at least 1 replica available during disruptions
# -----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: timescale-pdb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: timescale
    app.kubernetes.io/component: database
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: timescale
      app.kubernetes.io/component: database

# =============================================================================
# Usage Instructions
# =============================================================================
#
# 1. Create TimescaleDB Secrets (see secrets-template.yaml):
#    kubectl create secret generic timescale-credentials \
#      --from-literal=timescale-password=$(openssl rand -base64 32) \
#      --from-literal=location-db-username=location_service \
#      --from-literal=location-db-password=$(openssl rand -base64 32) \
#      -n sos-app
#
# 2. Create TimescaleDB initialization scripts ConfigMap:
#    kubectl create configmap timescale-init-scripts \
#      --from-file=init.sql=timescale-init.sql \
#      -n sos-app
#
# 3. Apply this configuration:
#    kubectl apply -f timescale-statefulset.yaml
#
# 4. Wait for all replicas to be ready:
#    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=timescale -n sos-app --timeout=300s
#
# 5. Verify TimescaleDB installation:
#    kubectl exec -it timescale-0 -n sos-app -c timescale -- \
#      psql -U postgres -d sos_app_location -c "SELECT * FROM timescaledb_information.hypertables;"
#
# 6. Check replication status:
#    kubectl exec -it timescale-0 -n sos-app -c timescale -- \
#      psql -U postgres -c "SELECT * FROM pg_stat_replication;"
#
# 7. Connect to TimescaleDB:
#    # Read/Write (primary):
#    postgresql://location_service:PASSWORD@timescale-service:5432/sos_app_location
#
#    # Read-Only (replicas):
#    postgresql://location_service:PASSWORD@timescale-readonly-service:5432/sos_app_location
#
# =============================================================================
# Monitoring
# =============================================================================
#
# Prometheus metrics available at:
#   http://timescale-service:9187/metrics
#
# Key metrics:
# - pg_up - Database uptime
# - pg_stat_database_* - Database statistics
# - pg_stat_replication_* - Replication lag
# - pg_stat_activity_count - Active connections
#
# =============================================================================
# Backup and Recovery
# =============================================================================
#
# Backup:
#   kubectl exec -it timescale-0 -n sos-app -c timescale -- \
#     pg_basebackup -U postgres -D /backup -Ft -z -P
#
# Point-in-time recovery requires WAL archiving (configure with cloud storage)
#
# =============================================================================
# Scaling
# =============================================================================
#
# Scale replicas (read replicas only):
#   kubectl scale statefulset timescale --replicas=5 -n sos-app
#
# Note: TimescaleDB does not support horizontal scaling of writes.
# For write scaling, consider:
# - Partitioning by user_id or device_id
# - Using distributed TimescaleDB (commercial feature)
#
# =============================================================================
