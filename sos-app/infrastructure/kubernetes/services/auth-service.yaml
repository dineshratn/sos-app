# =============================================================================
# SOS App - Auth Service Deployment
# =============================================================================
# Purpose: Authentication and authorization service (JWT, OAuth, RBAC)
# Language: Go
# Database: PostgreSQL (sos_app_auth)
# Cache: Redis
# =============================================================================

---
# -----------------------------------------------------------------------------
# Service: Auth Service
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: sos-app
  annotations:
    description: "Authentication and authorization service"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: metrics
    port: 9091
    targetPort: 9091
    protocol: TCP
  selector:
    app.kubernetes.io/name: auth-service

---
# -----------------------------------------------------------------------------
# Deployment: Auth Service
# -----------------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: sos-app
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: sos-app
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service

  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: sos-app
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9091"
        prometheus.io/path: "/metrics"

    spec:
      # Priority Class
      priorityClassName: sos-app-high

      # Service Account
      serviceAccountName: default

      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Anti-Affinity
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: auth-service
              topologyKey: kubernetes.io/hostname

      containers:
      - name: auth-service
        image: sos-app/auth-service:latest
        imagePullPolicy: IfNotPresent

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: metrics
          containerPort: 9091
          protocol: TCP

        env:
        # Service Configuration
        - name: SERVICE_NAME
          value: "auth-service"
        - name: SERVICE_VERSION
          value: "1.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: HTTP_PORT
          value: "8080"
        - name: GRPC_PORT
          value: "9090"
        - name: METRICS_PORT
          value: "9091"

        # Database Configuration
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "sos_app_auth"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: auth-db-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: auth-db-password
        - name: DB_MAX_CONNECTIONS
          value: "25"
        - name: DB_MAX_IDLE_CONNECTIONS
          value: "5"

        # Redis Configuration
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-password

        # JWT Configuration
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: jwt-secret
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: jwt-refresh-secret
        - name: JWT_EXPIRATION
          value: "900"  # 15 minutes
        - name: JWT_REFRESH_EXPIRATION
          value: "604800"  # 7 days

        # OAuth Configuration
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: google-client-id
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: google-client-secret
        - name: APPLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: apple-client-id
        - name: APPLE_TEAM_ID
          valueFrom:
            secretKeyRef:
              name: oauth-credentials
              key: apple-team-id

        # Logging
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: sos-app-logging
              key: LOG_LEVEL
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: sos-app-logging
              key: LOG_FORMAT

        # Tracing
        - name: JAEGER_AGENT_HOST
          value: "jaeger-agent"
        - name: JAEGER_AGENT_PORT
          value: "6831"

        # Rate Limiting
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_REQUESTS
          value: "100"
        - name: RATE_LIMIT_WINDOW
          value: "60"  # 100 requests per minute

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi

        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

        volumeMounts:
        - name: tmp
          mountPath: /tmp

      volumes:
      - name: tmp
        emptyDir: {}

---
# -----------------------------------------------------------------------------
# HorizontalPodAutoscaler: Auth Service
# -----------------------------------------------------------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: sos-app
  labels:
    app.kubernetes.io/name: auth-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# -----------------------------------------------------------------------------
# PodDisruptionBudget: Auth Service
# -----------------------------------------------------------------------------
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: sos-app
  labels:
    app.kubernetes.io/name: auth-service
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service

# =============================================================================
# Auth Service API Endpoints
# =============================================================================
#
# REST API (HTTP - Port 8080):
#
# POST   /api/v1/auth/register          - Register new user
# POST   /api/v1/auth/login             - Login with email/password
# POST   /api/v1/auth/logout            - Logout (blacklist token)
# POST   /api/v1/auth/refresh           - Refresh access token
# POST   /api/v1/auth/verify-email      - Verify email address
# POST   /api/v1/auth/forgot-password   - Request password reset
# POST   /api/v1/auth/reset-password    - Reset password
# POST   /api/v1/auth/change-password   - Change password
#
# OAuth:
# GET    /api/v1/auth/oauth/google      - Google OAuth login
# GET    /api/v1/auth/oauth/apple       - Apple OAuth login
# POST   /api/v1/auth/oauth/callback    - OAuth callback
#
# Token Management:
# POST   /api/v1/auth/validate          - Validate JWT token
# POST   /api/v1/auth/revoke            - Revoke token
# GET    /api/v1/auth/sessions          - List active sessions
# DELETE /api/v1/auth/sessions/:id      - Revoke session
#
# Health:
# GET    /health/live                   - Liveness probe
# GET    /health/ready                  - Readiness probe
# GET    /health/startup                - Startup probe
#
# Metrics:
# GET    /metrics                       - Prometheus metrics (port 9091)
#
# gRPC API (Port 9090):
#
# rpc Register(RegisterRequest) returns (AuthResponse)
# rpc Login(LoginRequest) returns (AuthResponse)
# rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse)
# rpc RefreshToken(RefreshTokenRequest) returns (AuthResponse)
# rpc RevokeToken(RevokeTokenRequest) returns (Empty)
#
# =============================================================================
# Database Schema (PostgreSQL - sos_app_auth)
# =============================================================================
#
# Table: users
# - id (UUID, PK)
# - email (VARCHAR, UNIQUE)
# - password_hash (VARCHAR)
# - email_verified (BOOLEAN)
# - created_at (TIMESTAMP)
# - updated_at (TIMESTAMP)
#
# Table: oauth_providers
# - id (UUID, PK)
# - user_id (UUID, FK -> users.id)
# - provider (VARCHAR) - 'google', 'apple'
# - provider_user_id (VARCHAR)
# - created_at (TIMESTAMP)
#
# Table: sessions
# - id (UUID, PK)
# - user_id (UUID, FK -> users.id)
# - refresh_token_hash (VARCHAR)
# - user_agent (VARCHAR)
# - ip_address (VARCHAR)
# - expires_at (TIMESTAMP)
# - created_at (TIMESTAMP)
#
# Table: password_resets
# - id (UUID, PK)
# - user_id (UUID, FK -> users.id)
# - token_hash (VARCHAR)
# - expires_at (TIMESTAMP)
# - used (BOOLEAN)
# - created_at (TIMESTAMP)
#
# =============================================================================
# Redis Cache Keys
# =============================================================================
#
# JWT Blacklist:
# - Key: blacklist:{jti}
# - TTL: Token expiration time
# - Value: "1"
#
# Session Cache:
# - Key: session:{sessionId}
# - TTL: 7 days
# - Value: JSON {userId, email, createdAt}
#
# Rate Limiting:
# - Key: ratelimit:auth:{userId}:{minute}
# - TTL: 60 seconds
# - Value: Request count
#
# Failed Login Attempts:
# - Key: failed_login:{email}
# - TTL: 15 minutes
# - Value: Attempt count
#
# =============================================================================
# Security Features
# =============================================================================
#
# 1. Password Security:
#    - bcrypt hashing (cost 12)
#    - Minimum 8 characters
#    - Requires: uppercase, lowercase, number, special char
#
# 2. JWT Security:
#    - RS256 algorithm (asymmetric)
#    - Short expiration (15 minutes)
#    - Refresh token rotation
#    - Token blacklisting on logout
#
# 3. Rate Limiting:
#    - 100 requests per minute per user
#    - Failed login lockout (5 attempts = 15 min lockout)
#    - Account lockout after 10 failed attempts
#
# 4. OAuth Security:
#    - State parameter validation
#    - PKCE for mobile apps
#    - Token verification
#
# 5. Session Management:
#    - Multiple device support
#    - Session revocation
#    - Automatic session cleanup
#
# =============================================================================
